basePath: /api/v1
definitions:
  authdto.AdminGetMeResponse:
    properties:
      user:
        $ref: '#/definitions/userdto.AdminUserDTO'
    type: object
  authdto.AdminGetMeResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/authdto.AdminGetMeResponse'
      message:
        type: string
    type: object
  authdto.AdminLoginResponse:
    properties:
      jwt:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/userdto.AdminUserDTO'
    type: object
  authdto.AdminLoginResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/authdto.AdminLoginResponse'
      message:
        type: string
    type: object
  authdto.ClientGetMeResponse:
    properties:
      user:
        $ref: '#/definitions/userdto.CommonUserDTO'
    type: object
  authdto.ClientGetMeResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/authdto.ClientGetMeResponse'
      message:
        type: string
    type: object
  authdto.ClientLoginResponse:
    properties:
      jwt:
        type: string
      refreshToken:
        type: string
      user:
        $ref: '#/definitions/userdto.CommonUserDTO'
    type: object
  authdto.ClientLoginResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/authdto.ClientLoginResponse'
      message:
        type: string
    type: object
  authdto.GetAccessTokenRequest:
    properties:
      refreshToken:
        type: string
    type: object
  authdto.GetAccessTokenResponse:
    properties:
      jwt:
        type: string
    type: object
  authdto.GetAccessTokenResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/authdto.GetAccessTokenResponse'
      message:
        type: string
    type: object
  authdto.LoginRequest:
    properties:
      device:
        enum:
        - mobile
        - web
        example: web
        type: string
      email:
        example: superadmin@example.com
        type: string
      password:
        example: Admin1234
        type: string
    required:
    - device
    - email
    - password
    type: object
  authdto.LogoutResponseWrapper:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  categorydto.CategoryDTO:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  categorydto.GetCategoryResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/categorydto.CategoryDTO'
        type: array
    type: object
  categorydto.GetCategoryResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/categorydto.GetCategoryResponse'
      message:
        type: string
    type: object
  enums.AppError:
    properties:
      code:
        example: 400
        type: integer
      error:
        example: INVALID_QUERY_PARAM
        type: string
      message:
        example: Name is require
        type: string
    type: object
  enums.ItemClassify:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      ItemClassifyAll: 0 all
      ItemClassifyLoseItem: 2 đồ thất lạc
      ItemClassifyOlItem: 1 đồ cũ
    x-enum-varnames:
    - ItemClassifyAll
    - ItemClassifyOlItem
    - ItemClassifyLoseItem
  enums.PostStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-comments:
      PostStatusAll: 0 Người dùng đã gửi yêu cầu duyệt bài và đang chờ xử lý
      PostStatusApproved: 3 Admin duyệt
      PostStatusPending: 1 Người dùng đã gửi yêu cầu duyệt bài và đang chờ xử lý
      PostStatusRejected: 2 Admin đã từ chối
    x-enum-varnames:
    - PostStatusAll
    - PostStatusPending
    - PostStatusRejected
    - PostStatusApproved
  enums.PostType:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-comments:
      PostTypeAll: 0 all
      PostTypeFoundItem: 2 nhặt được đồ
      PostTypeGiveAwayOldItem: 1 tặng đồ cũ
      PostTypeOther: 4 khác
      PostTypeSeekLoseItem: 3 tìm kiếm đồ
    x-enum-varnames:
    - PostTypeAll
    - PostTypeGiveAwayOldItem
    - PostTypeFoundItem
    - PostTypeSeekLoseItem
    - PostTypeOther
  enums.TransactionStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-comments:
      TransactionStatusAll: 0 all
      TransactionStatusCancelled: 3 đã hủy bởi 1 trong 2 bên
      TransactionStatusPending: 1 đợi xác nhận từ chủ bài viết
      TransactionStatusSuccess: 2 thành công
    x-enum-varnames:
    - TransactionStatusAll
    - TransactionStatusPending
    - TransactionStatusSuccess
    - TransactionStatusCancelled
  enums.UserStatus:
    enum:
    - 0
    - 1
    - 2
    - 3
    type: integer
    x-enum-comments:
      UserStatusActive: "2"
      UserStatusAll: "0"
      UserStatusInactive: "1"
      UserStatusLocked: "3"
    x-enum-varnames:
    - UserStatusAll
    - UserStatusInactive
    - UserStatusActive
    - UserStatusLocked
  importinvoicedto.CreateImportInvoiceRequest:
    properties:
      classify:
        allOf:
        - $ref: '#/definitions/enums.ItemClassify'
        enum:
        - 1
        - 2
        example: 1
      description:
        type: string
      itemImportInvoice:
        items:
          $ref: '#/definitions/importinvoicedto.CreateItemImportInvoiceRequest'
        type: array
      senderID:
        type: integer
    required:
    - classify
    - itemImportInvoice
    - senderID
    type: object
  importinvoicedto.CreateImportInvoiceResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/warehousedto.ItemWarehouse'
        type: array
    type: object
  importinvoicedto.CreateImportInvoiceResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/importinvoicedto.CreateImportInvoiceResponse'
      message:
        type: string
    type: object
  importinvoicedto.CreateItemImportInvoiceRequest:
    properties:
      description:
        type: string
      itemID:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - itemID
    - quantity
    type: object
  importinvoicedto.GetmportInvoiceResponse:
    properties:
      importInvoices:
        items:
          $ref: '#/definitions/importinvoicedto.ImportInvoiceListDTO'
        type: array
      totalPage:
        type: integer
    type: object
  importinvoicedto.GetmportInvoiceResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/importinvoicedto.GetmportInvoiceResponse'
      message:
        type: string
    type: object
  importinvoicedto.ImportInvoiceListDTO:
    properties:
      classify:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      itemCount:
        type: integer
      receiverName:
        type: string
      senderName:
        type: string
    type: object
  interestdto.CreateInterest:
    properties:
      postID:
        type: integer
    required:
    - postID
    type: object
  interestdto.CreateInterestResponse:
    properties:
      interestID:
        type: integer
    type: object
  interestdto.CreateInterestResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/interestdto.CreateInterestResponse'
      message:
        type: string
    type: object
  interestdto.DeleteInterestResponse:
    properties:
      interestID:
        type: integer
    type: object
  interestdto.DeleteInterestResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/interestdto.DeleteInterestResponse'
      message:
        type: string
    type: object
  interestdto.GetInterestResponse:
    properties:
      interests:
        items:
          $ref: '#/definitions/interestdto.PostInterest'
        type: array
      totalPage:
        type: integer
    type: object
  interestdto.GetInterestResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/interestdto.GetInterestResponse'
      message:
        type: string
    type: object
  interestdto.Interest:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      postID:
        type: integer
      status:
        type: integer
      userAvatar:
        type: string
      userID:
        type: integer
      userName:
        type: string
    type: object
  interestdto.PostInterest:
    properties:
      authorID:
        type: integer
      authorName:
        type: string
      description:
        type: string
      id:
        type: integer
      interests:
        items:
          $ref: '#/definitions/interestdto.Interest'
        type: array
      items:
        items:
          $ref: '#/definitions/interestdto.PostInterestItem'
        type: array
      slug:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/enums.PostType'
      updatedAt:
        type: string
    type: object
  interestdto.PostInterestItem:
    properties:
      categoryName:
        type: string
      currentQuantity:
        type: integer
      id:
        type: integer
      image:
        type: string
      itemID:
        type: integer
      name:
        type: string
      quantity:
        type: integer
    type: object
  itemdto.CreateItemRequest:
    properties:
      categoryID:
        type: integer
      description:
        type: string
      image:
        type: string
      name:
        type: string
    required:
    - categoryID
    - name
    type: object
  itemdto.CreateItemResponse:
    properties:
      item:
        $ref: '#/definitions/itemdto.ItemDTO'
    type: object
  itemdto.CreateItemResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/itemdto.CreateItemResponse'
      message:
        type: string
    type: object
  itemdto.DeleteItemResponseWrapper:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  itemdto.GetItemByIDResponse:
    properties:
      item:
        $ref: '#/definitions/itemdto.ItemDTO'
    type: object
  itemdto.GetItemByIDResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/itemdto.GetItemByIDResponse'
      message:
        type: string
    type: object
  itemdto.GetItemResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/itemdto.ItemDTO'
        type: array
      totalPage:
        type: integer
    type: object
  itemdto.GetItemResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/itemdto.GetItemResponse'
      message:
        type: string
    type: object
  itemdto.ItemDTO:
    properties:
      categoryID:
        type: integer
      categoryName:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      name:
        type: string
    type: object
  itemdto.UpdateItemRequest:
    properties:
      categoryID:
        type: integer
      description:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  itemdto.UpdateItemResponseWrapper:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  postdto.AdminPostDTO:
    properties:
      authorName:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      isInterest:
        type: boolean
      status:
        type: integer
      title:
        type: string
      type:
        type: integer
    type: object
  postdto.CreatePostRequest:
    properties:
      description:
        type: string
      images:
        example:
        - strbase64
        - ' strbase64'
        items:
          type: string
        type: array
      info:
        type: string
      newItems:
        items:
          $ref: '#/definitions/postdto.NewItemsPost'
        type: array
      oldItems:
        items:
          $ref: '#/definitions/postdto.OldItemsPost'
        type: array
      title:
        example: Tôi muốn tìm đồ thất lạc
        type: string
      type:
        allOf:
        - $ref: '#/definitions/enums.PostType'
        description: |-
          Email       string         `json:"email" example:"john@gmail.com"`
          FullName    string         `json:"fullName" example:"John Doe"`
          PhoneNumber string         `json:"phoneNumber" example:"0123456789"` // true: anonymous, false: not anonymous
        enum:
        - 1
        - 2
        - 3
        - 4
        example: 1
    required:
    - title
    type: object
  postdto.CreatePostResponseWrapper:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  postdto.DetailPostDTO:
    properties:
      authorAvatar:
        type: string
      authorID:
        type: integer
      authorName:
        type: string
      content:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      info:
        type: string
      interests:
        items:
          $ref: '#/definitions/postdto.InterestDTO'
        type: array
      items:
        items:
          $ref: '#/definitions/postdto.DetailPostItemDTO'
        type: array
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        type: integer
    type: object
  postdto.DetailPostItemDTO:
    properties:
      categoryID:
        type: integer
      categoryName:
        type: string
      currentQuantity:
        type: integer
      id:
        type: integer
      image:
        type: string
      itemID:
        type: integer
      name:
        type: string
      quantity:
        type: integer
    type: object
  postdto.GetAdminPostResponse:
    properties:
      posts:
        items:
          $ref: '#/definitions/postdto.AdminPostDTO'
        type: array
      totalPage:
        type: integer
    type: object
  postdto.GetAdminPostResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/postdto.GetAdminPostResponse'
      message:
        type: string
    type: object
  postdto.GetDetailPostResponse:
    properties:
      post:
        $ref: '#/definitions/postdto.DetailPostDTO'
    type: object
  postdto.GetDetailPostResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/postdto.GetDetailPostResponse'
      message:
        type: string
    type: object
  postdto.GetPostResponse:
    properties:
      posts:
        items:
          $ref: '#/definitions/postdto.PostWithCountDTO'
        type: array
      totalPage:
        type: integer
    type: object
  postdto.GetPostResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/postdto.GetPostResponse'
      message:
        type: string
    type: object
  postdto.InterestDTO:
    properties:
      id:
        type: integer
      postID:
        type: integer
      status:
        type: integer
      userAvatar:
        type: string
      userID:
        type: integer
      userName:
        type: string
    type: object
  postdto.NewItemsPost:
    properties:
      categoryID:
        type: integer
      image:
        type: string
      name:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - categoryID
    - name
    type: object
  postdto.OldItemsPost:
    properties:
      image:
        type: string
      itemID:
        type: integer
      quantity:
        minimum: 1
        type: integer
    required:
    - itemID
    type: object
  postdto.PostWithCountDTO:
    properties:
      authorAvatar:
        type: string
      authorID:
        type: integer
      authorName:
        type: string
      content:
        type: string
      createdAt:
        type: string
      currentItemCount:
        type: integer
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      info:
        type: string
      interestCount:
        type: integer
      isInterest:
        type: integer
      itemCount:
        type: integer
      slug:
        type: string
      status:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        type: integer
    type: object
  postdto.UpdatePostRequest:
    properties:
      description:
        type: string
      images:
        example:
        - strbase64
        - ' strbase64'
        items:
          type: string
        type: array
      status:
        allOf:
        - $ref: '#/definitions/enums.PostStatus'
        enum:
        - 1
        - 2
        - 3
      title:
        example: Tôi muốn tìm đồ thất lạc
        type: string
    type: object
  postdto.UpdatePostResponseWrapper:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  transactiondto.CreateTransactionItem:
    properties:
      postItemID:
        type: integer
      quantity:
        type: integer
    required:
    - postItemID
    - quantity
    type: object
  transactiondto.CreateTransactionRequest:
    properties:
      interestID:
        description: PostID     uint                    `json:"postID" binding:"required"`
        type: integer
      items:
        description: SenderID   uint                    `json:"senderID" binding:"required"`
        items:
          $ref: '#/definitions/transactiondto.CreateTransactionItem'
        type: array
    required:
    - interestID
    - items
    type: object
  transactiondto.CreateTransactionResponse:
    properties:
      transaction:
        $ref: '#/definitions/transactiondto.TransactionDTO'
    type: object
  transactiondto.CreateTransactionResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/transactiondto.CreateTransactionResponse'
      message:
        type: string
    type: object
  transactiondto.DetailTransactionDTO:
    properties:
      id:
        type: integer
      interestID:
        type: integer
      items:
        items:
          $ref: '#/definitions/transactiondto.DetailTransactionItemDTO'
        type: array
      receiverID:
        type: integer
      receiverName:
        type: string
      senderID:
        type: integer
      senderName:
        type: string
      status:
        type: integer
    type: object
  transactiondto.DetailTransactionItemDTO:
    properties:
      itemID:
        type: integer
      itemName:
        type: string
      postItemID:
        type: integer
      quantity:
        type: integer
    type: object
  transactiondto.FilterTransactionResponse:
    properties:
      totalPage:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/transactiondto.DetailTransactionDTO'
        type: array
    type: object
  transactiondto.FilterTransactionResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/transactiondto.FilterTransactionResponse'
      message:
        type: string
    type: object
  transactiondto.TransactionDTO:
    properties:
      id:
        type: integer
      interestID:
        type: integer
      items:
        items:
          $ref: '#/definitions/transactiondto.TransactionItemDTO'
        type: array
      receiverID:
        type: integer
      senderID:
        type: integer
      status:
        type: integer
    type: object
  transactiondto.TransactionItemDTO:
    properties:
      postItemID:
        type: integer
      quantity:
        type: integer
    type: object
  transactiondto.UpdateTransactionItem:
    properties:
      postItemID:
        type: integer
      quantity:
        type: integer
      transactionID:
        type: integer
    required:
    - postItemID
    - quantity
    - transactionID
    type: object
  transactiondto.UpdateTransactionRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/transactiondto.UpdateTransactionItem'
        type: array
      status:
        $ref: '#/definitions/enums.TransactionStatus'
    type: object
  transactiondto.UpdateTransactionResponse:
    properties:
      transaction:
        $ref: '#/definitions/transactiondto.TransactionDTO'
    type: object
  transactiondto.UpdateTransactionResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/transactiondto.UpdateTransactionResponse'
      message:
        type: string
    type: object
  userdto.AdminUserDTO:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      fullName:
        type: string
      goodPoint:
        type: integer
      id:
        type: integer
      major:
        type: string
      permissions:
        items:
          $ref: '#/definitions/userdto.Permission'
        type: array
      phoneNumber:
        type: string
      roleID:
        type: integer
      roleName:
        type: string
      status:
        type: integer
    type: object
  userdto.CommonUserDTO:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      fullName:
        type: string
      goodPoint:
        type: integer
      id:
        type: integer
      major:
        type: string
      phoneNumber:
        type: string
      roleID:
        type: integer
      roleName:
        type: string
      status:
        type: integer
    type: object
  userdto.CreateUserRequest:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        example: john@gmail.com
        type: string
      fullName:
        example: John Doe
        type: string
      goodPoint:
        type: integer
      password:
        minLength: 8
        type: string
      phoneNumber:
        example: "0123456789"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        description: '0: inactive, 1: active, 2: banned'
        enum:
        - 0
        - 1
        - 2
        example: 1
    required:
    - email
    - fullName
    - password
    type: object
  userdto.CreateUserResponse:
    properties:
      user:
        $ref: '#/definitions/userdto.UserDTO'
    type: object
  userdto.CreateUserResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/userdto.CreateUserResponse'
      message:
        type: string
    type: object
  userdto.DeleteUserResponseWrapper:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  userdto.GetUserByIDResponse:
    properties:
      user:
        $ref: '#/definitions/userdto.UserDTO'
    type: object
  userdto.GetUserByIDResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/userdto.GetUserByIDResponse'
      message:
        type: string
    type: object
  userdto.GetUserResponse:
    properties:
      totalPage:
        type: integer
      users:
        items:
          $ref: '#/definitions/userdto.UserDTO'
        type: array
    type: object
  userdto.GetUserResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/userdto.GetUserResponse'
      message:
        type: string
    type: object
  userdto.Permission:
    properties:
      code:
        type: string
    type: object
  userdto.UpdateUserRequest:
    properties:
      address:
        type: string
      avatar:
        type: string
      fullName:
        example: John Doe
        type: string
      goodPoint:
        type: integer
      major:
        example: Information Technology
        type: string
      phoneNumber:
        example: "0123456789"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        description: '0: inactive, 1: active, 2: banned'
        enum:
        - 0
        - 1
        - 2
        example: 1
    type: object
  userdto.UpdateUserResponseWrapper:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  userdto.UserDTO:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      fullName:
        type: string
      goodPoint:
        type: integer
      id:
        type: integer
      major:
        type: string
      phoneNumber:
        type: string
      status:
        type: integer
    type: object
  warehousedto.ItemWarehouse:
    properties:
      code:
        type: string
      description:
        type: string
      itemID:
        type: integer
      itemName:
        type: string
    type: object
info:
  contact:
    email: trannguyentrungkien1006@gmail.com
    name: Kin
  description: Đây là tài liệu Swagger cho hệ thống.
  license:
    name: Apache 2.0
  termsOfService: http://swagger.io/terms/
  title: ShareAndSave - API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: API lấy ra tất cả danh mục đồ đạc
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/categorydto.GetCategoryResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get categories
      tags:
      - categories
  /client/get-me:
    get:
      consumes:
      - application/json
      description: API lấy thông tin client + jwt
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authdto.ClientGetMeResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Client Get Me
      tags:
      - auth
  /client/login:
    post:
      consumes:
      - application/json
      description: Đăng nhập client với email và mật khẩu mạnh
      parameters:
      - description: Dữ liệu đăng nhập
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/authdto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authdto.ClientLoginResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Client Login
      tags:
      - auth
  /client/logout:
    post:
      consumes:
      - application/json
      description: Đăng xuất dành cho client
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authdto.LogoutResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Client Logout
      tags:
      - auth
  /client/posts:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record of page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Sort column
        example: authorName, title, createdAt
        in: query
        name: sort
        type: string
      - description: Sort type
        example: ASC, DESC
        in: query
        name: order
        type: string
      - description: GiveAwayOldItem:1, FoundItem:2, SeekLoseItem:3, Other:4
        example: 1, 2, 3, 4
        in: query
        name: type
        type: string
      - description: Giá trị lọc (author_name, title, tag, content)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postdto.GetPostResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get posts client
      tags:
      - posts
  /get-me:
    get:
      consumes:
      - application/json
      description: API lấy thông tin admin + jwt
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authdto.AdminGetMeResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Admin Get Me
      tags:
      - auth
  /import-invoice:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record of page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Sort column
        example: authorName, title, createdAt
        in: query
        name: sort
        type: string
      - description: Sort type
        example: ASC, DESC
        in: query
        name: order
        type: string
      - description: 'Trường lọc (vd: senderName, receiverName)'
        in: query
        name: searchBy
        type: string
      - description: Giá trị lọc (vd:abc@gmail.com, John Doe)
        in: query
        name: searchValue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/importinvoicedto.GetmportInvoiceResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Get import invoice
      tags:
      - import invoice
    post:
      consumes:
      - application/json
      description: API tạo phiếu nhập kho kèm lưu kho
      parameters:
      - description: Import invoice creation payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/importinvoicedto.CreateImportInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/importinvoicedto.CreateImportInvoiceResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Create import invoice
      tags:
      - import invoice
  /interests:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record of page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Sort column (createdAt)
        in: query
        name: sort
        type: string
      - description: Sort type
        example: ASC, DESC
        in: query
        name: order
        type: string
      - description: 'Interested: 1, FollowedBy: 2'
        in: query
        name: type
        type: integer
      - description: Search value
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/interestdto.GetInterestResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Get interest
      tags:
      - interests
    post:
      consumes:
      - application/json
      description: API quan tâm đến bài viết + JWT
      parameters:
      - description: Interest creation payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/interestdto.CreateInterest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/interestdto.CreateInterestResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Create interest
      tags:
      - interests
  /interests/{postID}:
    delete:
      consumes:
      - application/json
      description: API xóa interest theo ID
      parameters:
      - description: ID post
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted interest successfully
          schema:
            $ref: '#/definitions/interestdto.DeleteInterestResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Delete Interest
      tags:
      - interests
  /items:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record per page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: 'Sort column (vd: name)'
        example: name
        in: query
        name: sort
        type: string
      - description: 'Sort type: ASC hoặc DESC'
        example: ASC
        in: query
        name: order
        type: string
      - description: 'Trường lọc (vd: email, full_name)'
        in: query
        name: searchBy
        type: string
      - description: Giá trị lọc (vd:abc@gmail.com, John Doe)
        in: query
        name: searchValue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/itemdto.GetItemResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: API thêm item mới
      parameters:
      - description: Create item info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/itemdto.CreateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created item successfully
          schema:
            $ref: '#/definitions/itemdto.CreateItemResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Create new item
      tags:
      - items
  /items/{itemID}:
    delete:
      consumes:
      - application/json
      description: API xóa item theo ID
      parameters:
      - description: ID item
        in: path
        name: itemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted item successfully
          schema:
            $ref: '#/definitions/itemdto.DeleteItemResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Delete item
      tags:
      - items
    get:
      consumes:
      - application/json
      description: API lấy thông tin item theo ID
      parameters:
      - description: ID item
        in: path
        name: itemID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/itemdto.GetItemByIDResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get item by ID
      tags:
      - items
    patch:
      consumes:
      - application/json
      description: API cập nhật item
      parameters:
      - description: ID item
        in: path
        name: itemID
        required: true
        type: integer
      - description: Update item info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/itemdto.UpdateItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated item successfully
          schema:
            $ref: '#/definitions/itemdto.UpdateItemResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Update item
      tags:
      - items
  /login:
    post:
      consumes:
      - application/json
      description: Đăng nhập admin với email và mật khẩu mạnh
      parameters:
      - description: Dữ liệu đăng nhập
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/authdto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authdto.AdminLoginResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Admin Login
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Đăng xuất dành cho admin
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authdto.LogoutResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Admin Logout
      tags:
      - auth
  /posts:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record of page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Sort column
        example: authorName, title, createdAt
        in: query
        name: sort
        type: string
      - description: Sort type
        example: ASC, DESC
        in: query
        name: order
        type: string
      - description: Pending:1, Rejected:2, Approved:3
        example: 1, 2, 3
        in: query
        name: status
        type: string
      - description: GiveAwayOldItem:1, FoundItem:2, SeekLoseItem:3, Other:4
        example: 1, 2, 3, 4
        in: query
        name: type
        type: string
      - description: 'Trường lọc (vd: email, fullName)'
        in: query
        name: searchBy
        type: string
      - description: Giá trị lọc (vd:abc@gmail.com, John Doe)
        in: query
        name: searchValue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postdto.GetAdminPostResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Get posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: API tạo mới một post
      parameters:
      - description: Post creation payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/postdto.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/postdto.CreatePostResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{postID}:
    get:
      consumes:
      - application/json
      description: API lấy bài viết theo id
      parameters:
      - description: ID post
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postdto.GetDetailPostResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get detail post by id
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: API cập nhật bài viết kết hợp với patch
      parameters:
      - description: ID post
        in: path
        name: postID
        required: true
        type: integer
      - description: Update post info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/postdto.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated post successfully
          schema:
            $ref: '#/definitions/postdto.UpdatePostResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Update posts
      tags:
      - posts
  /posts/slug/{postSlug}:
    get:
      consumes:
      - application/json
      description: API lấy bài viết theo slug
      parameters:
      - description: Slug post
        in: path
        name: postSlug
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/postdto.GetDetailPostResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get detail post by slug
      tags:
      - posts
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Lấy access token
      parameters:
      - description: Refresh Token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authdto.GetAccessTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authdto.GetAccessTokenResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Refresh Token
      tags:
      - auth
  /transactions:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record per page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: 'Sort column (vd: name)'
        example: name
        in: query
        name: sort
        type: string
      - description: 'Sort type: ASC hoặc DESC'
        example: ASC
        in: query
        name: order
        type: string
      - description: Pending:1, Success:2, Cancelled:3
        example: 1, 2, 3
        in: query
        name: status
        type: string
      - description: Trường lọc (senderID, senderName, receiverID, receiverName, interestID)
        in: query
        name: searchBy
        type: string
      - description: 'Giá trị lọc:'
        in: query
        name: searchValue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transactiondto.FilterTransactionResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Get transaction
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: API tạo mới một giao dịch và trả về thông tin giao dịch
      parameters:
      - description: Transaction creation payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transactiondto.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/transactiondto.CreateTransactionResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Create transaction
      tags:
      - transactions
  /transactions/{transactionID}:
    patch:
      consumes:
      - application/json
      description: API cập nhật một giao dịch và trả về thông tin giao dịch
      parameters:
      - description: ID transaction
        in: path
        name: transactionID
        required: true
        type: integer
      - description: Transaction update payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transactiondto.UpdateTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transactiondto.UpdateTransactionResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/enums.AppError'
      security:
      - BearerAuth: []
      summary: Update transaction
      tags:
      - transactions
  /users:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record of page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: 'Sort column (vd: fullName, email)'
        example: name
        in: query
        name: sort
        type: string
      - description: 'Sort type: ASC hoặc DESC'
        example: ASC
        in: query
        name: order
        type: string
      - description: 'Trường lọc (vd: email, fullName)'
        in: query
        name: searchBy
        type: string
      - description: Giá trị lọc (vd:abc@gmail.com, John Doe)
        in: query
        name: searchValue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userdto.GetUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: API thêm người dùng
      parameters:
      - description: Create user info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userdto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user successfully
          schema:
            $ref: '#/definitions/userdto.CreateUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Create user
      tags:
      - users
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: API delete user by id
      parameters:
      - description: ID user
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userdto.DeleteUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: API get user by id
      parameters:
      - description: ID user
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userdto.GetUserByIDResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: API cập nhật người dùng
      parameters:
      - description: ID user
        in: path
        name: userID
        required: true
        type: integer
      - description: Update user info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userdto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user successfully
          schema:
            $ref: '#/definitions/userdto.UpdateUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Update user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
