basePath: /api/v1
definitions:
  enums.AppError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Name is require
        type: string
      status_code:
        example: INVALID_QUERY_PARAM
        type: string
    type: object
  enums.UserStatus:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      UserStatusActive: "1"
      UserStatusInactive: "0"
      UserStatusLocked: "2"
    x-enum-varnames:
    - UserStatusInactive
    - UserStatusActive
    - UserStatusLocked
  userDTO.CreateUserRequest:
    properties:
      address:
        type: string
      email:
        type: string
      fullName:
        type: string
      goodPoint:
        type: integer
      password:
        minLength: 8
        type: string
      phoneNumber:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        enum:
        - 0
        - 1
        - 2
    required:
    - email
    - fullName
    - password
    type: object
  userDTO.CreateUserResponse:
    properties:
      user:
        $ref: '#/definitions/userDTO.UserDTO'
    type: object
  userDTO.CreateUserResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/userDTO.CreateUserResponse'
      message:
        type: string
    type: object
  userDTO.DeleteUserResponseWrapper:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  userDTO.GetUserByIDResponse:
    properties:
      user:
        $ref: '#/definitions/userDTO.UserDTO'
    type: object
  userDTO.GetUserByIDResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/userDTO.GetUserByIDResponse'
      message:
        type: string
    type: object
  userDTO.GetUserResponse:
    properties:
      totalPage:
        type: integer
      users:
        items:
          $ref: '#/definitions/userDTO.UserDTO'
        type: array
    type: object
  userDTO.GetUserResponseWrapper:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/userDTO.GetUserResponse'
      message:
        type: string
    type: object
  userDTO.UpdateUserRequest:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      fullName:
        type: string
      goodPoint:
        type: integer
      id:
        type: integer
      password:
        minLength: 8
        type: string
      phoneNumber:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/enums.UserStatus'
        enum:
        - 0
        - 1
        - 2
    type: object
  userDTO.UpdateUserResponseWrapper:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  userDTO.UserDTO:
    properties:
      address:
        type: string
      avatar:
        type: string
      email:
        type: string
      fullName:
        type: string
      goodPoint:
        type: integer
      id:
        type: integer
      phoneNumber:
        type: string
      status:
        type: integer
    type: object
host: 34.142.168.171:8000
info:
  contact:
    email: trannguyentrungkien1006@gmail.com
    name: Kin
  description: Đây là tài liệu Swagger cho hệ thống.
  license:
    name: Apache 2.0
  termsOfService: http://swagger.io/terms/
  title: API DATN 2025
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: API bao gồm cả lọc, phân trang và sắp xếp
      parameters:
      - description: Current page
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number record of page
        example: 10
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: 'Sort column (vd: name, email)'
        example: name
        in: query
        name: sort
        type: string
      - description: 'Sort type: ASC hoặc DESC'
        example: ASC
        in: query
        name: order
        type: string
      - description: Filter by name or email
        example: '"{\"name\":\"John\", \"email\":\"john@gmail.com\"}"'
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userDTO.GetUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get user
      tags:
      - users
    post:
      consumes:
      - application/json
      description: API thêm người dùng
      parameters:
      - description: Create user info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userDTO.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user successfully
          schema:
            $ref: '#/definitions/userDTO.CreateUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Create user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: API cập nhật người dùng
      parameters:
      - description: Update user info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userDTO.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user successfully
          schema:
            $ref: '#/definitions/userDTO.UpdateUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Update user
      tags:
      - users
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: API delete user by id
      parameters:
      - description: ID user
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userDTO.DeleteUserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: API get user by id
      parameters:
      - description: ID user
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userDTO.GetUserByIDResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/enums.AppError'
      summary: Get user by ID
      tags:
      - users
swagger: "2.0"
